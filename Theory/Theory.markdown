# 1.  Опишіть машину Фон Неймана. Як архітектурні елементи зв'язані з кодом асемблера. Розкрийте етапи створення програми з використанням асемблеру tasm або іншого асемблеру, що вивчається.
## 1a. Архітекту́ра фон Неймана <a name="fon"></a>
Архітекту́ра фон Неймана (англ. Von Neumann architecture) — архітектура електронних обчислювальних машин, основною відмінністю якої від інших подібних архітектур є спільне зберігання даних та машинних команд в комірках однієї й тієї ж пам'яті, що унеможливлює їх розрізнення за способом представлення або кодування. Названа так на честь відомого математика та теоретика обчислювальної техніки Джона фон Неймана, та по сьогодні залишається домінуючою схемою організації ЕОМ загального призначення.

  Обчислювальна машина є машиною з архітектурою фон Неймана, якщо:
* Програма та дані зберігаються в одній загальній пам'яті. Це дає можливість виконувати над командами ті ж дії, що і над даними.
* Кожна комірка пам'яті машини ідентифікується унікальним номером, який називається адресою.
* Різні слова інформації (команди та дані) розрізняються за способом використання, але не за способом кодування та структурою представлення в пам'яті.
* Кожна програма виконується послідовно, починаючи з першої команди, якщо немає спеціальних вказівок. Для зміни цієї послідовності використовуються команди переходу.

Машина фон Неймана, як і практично кожна сучасна ЕОМ загального призначення, складається з чотирьох основних компонентів:

* Арифметико-логічний пристрій (АЛП, англ. arithmetic logic unit), який виконує команди з визначеного набору, який називається системою (набором) команд, над порціями інформації, яка зберігається відокремленій від операційного пристрою пам'яті (хоча сучасні архітектури мають в складі операційного пристрою додаткову пам'ять (зазвичай банк регістрів), в якій операнди зберігаються порівняно короткий час безпосередньо в процесі проведення обчислень.
* Пристрій керування процесором (англ. control unit), який організує послідовне виконання алгоритмів, розшифрування команд, які надходять із пристрою пам'яті (див. нижче), реагує на аварійні ситуації та виконує загальні функції керування всіма вузлами обчислювальної машини. Зазвичай АЛП та пристрій керування об'єднуються в структуру, яка називається центральним процесором. Слід звернути увагу, що вимога саме послідовного, в порядку надходження з пам'яті (в порядку зміни адрес в лічильнику команд) виконання команд є принциповою. Архітектури, які не додержуються такого принципу, взагалі не вважаються фон-нейманівськими.
* Комп'ютерна пам'ять (англ. primary storage) — масив комірок з унікальними ідентифікаторами (адресами), в яких зберігаються команди та дані.
* Пристрої вводу/виводу, які забезпечують зв'язок ЕОМ з зовнішнім світом, передають інформацію на переробку в ЕОМ та приймають результати.
## 3a.Розкрийте етапи створення програми з використанням асемблеру tasm або іншого асемблеру, що вивчається.

Етапи створення програми на мові Асемблера:

підготовка (або внесення змін) вихідного тексту програми;
асемблування програми (отримання об'єктного коду);
компоновка програми (отримання виконавчого файла програми);
налагодження програми (виправлення помилок).
Звичайно ці етапи циклічно повторюються, так як при виявлені помилок на всіх етапах доводиться повертатися до першого етапу і вносити зміни у текст програми для виправлення помилок.

Підготовка тексту програми
Текст програми на Асемблері записується в один чи декілька текстових файлів. Імена файлів і їх розширення можуть бути будь-які, але прийнято використовувати розширення *.asm. Ці файли є текстовими, їх можна підготовити за допомогою будь-якого текстового редактора і зберігати у вигляді звичайних файлів у форматі ASCII.

Асемблування програми
Підготовлений текст програми є вихідними даними для програм, які називаються асемблерами (наприклад програма Tasm). Завдання цієї програми - перетворити текст програми у форму двійкових команд, які може виконати МП. Після асемблування отримують файли об'єктних модулів, що мають розширення *.obj.

Компоновка програми У випадках, коли текст програми знаходиться у декількох файлах і спільно використовуються змінні, описані у цих файлах, обов'язково потрібно включити етап компоновки. Процес об'єднання об'єктних модулів в один файл здійснюється спеціальною програмою-компоновником (наприклад програма Tlink). Результатом компоновки є виконавчі файли, що мають розширення *.com, *.exe.

# 2. Розкрийте основну відмінність високорівневих мов програмування і асемблера у контексті зв'язку з архітектурою комп'ютера. Опишіть технологію створення вихідного коду на асемблері.
Команди мови **асемблера** відповідають машинним кодам відповідного мікропроцесора чи мікроконтролера. Фактично, мова асемблера являє собою зручнішу символьну форму запису машинних команд. Як наслідок, програми написані для одного типу процесорів, на іншому не будуть функціонувати. Мова асемблера також містить засоби для створення міток та переходів, що необхідно для створення циклів та розгалужень. Можуть бути наявні засоби для створення макросів, процедур. Кожне сімейство (модельний ряд) мікропроцесорів має свій набір команд і, відповідно, свій набір інструкцій на мові асемблера.

**Високорівнева мова програмування** — мова програмування, розроблена для швидкого і зручного використання програмістом. Основна риса високорівневих мов — це абстракція, тобто введення смислових конструкцій, які коротко описують такі структури даних і операції над ними, опис яких на машинному коді або низькорівневій мові програмування був би дуже великим, складним для розуміння програмістів і зайняв би багато часу при написанні. Написані програми на мові високого рівня згодом перетворюються в машинний код для виконання безпосередньо операційною системою. В результаті безпосередній код, що виконується на комп'ютері і створений в процесі трансляції переважно містить певні зайві інструкції, тому виконання таких програм дещо повільніше. Швидкість також залежить від способу трансляції. Проте для сучасної обчислювальної техніки цей час не критичний. В разі якщо швидкість все ж критична, або ж потрібно напряму працювати з апаратним забезпеченням, то використовують мови низького рівня (асемблер).

# 6. Опишіть технологію налагодження для асемблера tasm, які процеси відбуваються. Напишіть команду для запуску налагодження tasm.
Будь-яка програма потребує налагодження (виправлення помилок). Сучасні налагоджувальні програми (наприклад програми Debug, TurboDebugger) дозволяють у процесі виконання програми контролювати значення регістрів загального призначення чи змінних, змінювати їх. Можна переглядати вміст різних ділянок пам'яті. Можна виконувати програму по крокам.

# 7. Які елементи архітектури комп'ютерної системи показані у вікні налагоджувача асемблеру tasm.
* **Регістри**
* **Пам'ять**

# 8. Опишіть машину Фон Неймана. Які елементи машини Фон Неймана зображені на вікні налагоджувача tasm.
## 1a [Машина Фон Неймана](#fon)
