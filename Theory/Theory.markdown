# 1.  Архітекту́ра фон Неймана
Архітекту́ра фон Неймана (англ. Von Neumann architecture) — архітектура електронних обчислювальних машин, основною відмінністю якої від інших подібних архітектур є спільне зберігання даних та машинних команд в комірках однієї й тієї ж пам'яті, що унеможливлює їх розрізнення за способом представлення або кодування. Названа так на честь відомого математика та теоретика обчислювальної техніки Джона фон Неймана, та по сьогодні залишається домінуючою схемою організації ЕОМ загального призначення.

  Обчислювальна машина є машиною з архітектурою фон Неймана, якщо:
* Програма та дані зберігаються в одній загальній пам'яті. Це дає можливість виконувати над командами ті ж дії, що і над даними.
* Кожна комірка пам'яті машини ідентифікується унікальним номером, який називається адресою.
* Різні слова інформації (команди та дані) розрізняються за способом використання, але не за способом кодування та структурою представлення в пам'яті.
* Кожна програма виконується послідовно, починаючи з першої команди, якщо немає спеціальних вказівок. Для зміни цієї послідовності використовуються команди переходу.

Машина фон Неймана, як і практично кожна сучасна ЕОМ загального призначення, складається з чотирьох основних компонентів:

* Арифметико-логічний пристрій (АЛП, англ. arithmetic logic unit), який виконує команди з визначеного набору, який називається системою (набором) команд, над порціями інформації, яка зберігається відокремленій від операційного пристрою пам'яті (хоча сучасні архітектури мають в складі операційного пристрою додаткову пам'ять (зазвичай банк регістрів), в якій операнди зберігаються порівняно короткий час безпосередньо в процесі проведення обчислень.
* Пристрій керування процесором (англ. control unit), який організує послідовне виконання алгоритмів, розшифрування команд, які надходять із пристрою пам'яті (див. нижче), реагує на аварійні ситуації та виконує загальні функції керування всіма вузлами обчислювальної машини. Зазвичай АЛП та пристрій керування об'єднуються в структуру, яка називається центральним процесором. Слід звернути увагу, що вимога саме послідовного, в порядку надходження з пам'яті (в порядку зміни адрес в лічильнику команд) виконання команд є принциповою. Архітектури, які не додержуються такого принципу, взагалі не вважаються фон-нейманівськими.
* Комп'ютерна пам'ять (англ. primary storage) — масив комірок з унікальними ідентифікаторами (адресами), в яких зберігаються команди та дані.
* Пристрої вводу/виводу, які забезпечують зв'язок ЕОМ з зовнішнім світом, передають інформацію на переробку в ЕОМ та приймають результати.


## 4. Напишіть прапори команди tasm для асемблювання вихідного коду. Які можливості вони надають.
`tasm.exe /l /zi /x hello.asm`
 - Прапор **/l** створює у робочому каталозі файл лістингу hello.lst, що містить адреси,
машинні коди, текст, коментарі. Це інформація для налагодження
- Прапор **/x** створює файл карти пам’яті. Наприклад при виконанні команди: `tlink /x
hello.obj` створюєтся файл карти пам’яті hello.map (Linked Address Map)
- Прапор **/zi** додає до файлу hello.obj коментарі, назви змінних, тощо. Це
необхідно для спрощення процесу налагодження.

## 5. Опишіть технологію компонування (лінкування), які процеси відбуваються і які файли утворюються. Напишіть команду для компонування (лінкування).
- *Компоновка програми* У випадках, коли текст програми знаходиться у декількох файлах і спільно використовуються змінні, описані у цих файлах, обов'язково потрібно включити етап компоновки. Процес об'єднання об'єктних модулів в один файл здійснюється спеціальною програмою-компоновником (наприклад програма Tlink). Результатом компоновки є виконавчі файли, що мають розширення *.com, *.exe.
-  An object file is a binary representation of your program. The assembler gives a memory location to each variable and instruction; we will see later that these memory locations are actually represented symbolically or via offsets. It also make a lists of all the unresolved references that presumably will be defined in other object file or libraries, e.g. printf. A typical object file contains the program text (instructions) and data (constants and strings), information about instructions and data that depend on absolute addresses, a symbol table of unresolved references, and possibly some debugging information. The UNIX command nm allows you to look at the symbols (both defined and unresolved) in an object file.
- Since an object file will be linked with other object files and libraries to produce a program, the assembler cannot assign absolute memory locations to all the instructions and data in a file. Rather, it writes some notes in the object file about how it assumed things were layed out. It is the job of the linker to use these notes to assign absolute memory locations to everything and resolve any unresolved references. Again, both cc and gcc on the instructional machines use the native linker, ld. Some compilers chose to have their own linkers, so that optimizations can be performed at link time; one such optimization is that of aligning procedures on page boundaries. The linker produces a binary executable that can be run from the command interface. 

- При виконанні `tlink.exe /v hello.obj.` утворюється файл hello.exe
Прапор **/v** додає до файлу hello.exe інформацію для спрощення процесу
налагодження (коментарі, назви змінних, тощо) Interpreter: translate and execute
programs directly

- Результат роботи закінчення визначення адресних посилань і поєднання при необхідності декількох *.obj для створення програми, що виконується


## 6. Опишіть технологію налагодження для асемблера tasm, які процеси відбуваються. Напишіть команду для запуску налагодження tasm.
- *Налагодження програми* Будь-яка програма потребує налагодження (виправлення помилок). Сучасні налагоджувальні програми (наприклад програми Debug, TurboDebugger) дозволяють у процесі виконання програми контролювати значення регістрів загального призначення чи змінних, змінювати їх. Можна переглядати вміст різних ділянок пам'яті. Можна виконувати програму по крокам.
`td my_prog.exe`
- Результат роботи – можливість прогону програми по крокам, перегляд змісту пам'яті, регістрів, регістру прапорів

### полезная картинка
![tasm processes](http://www.itdom.info/Tehnol/8.files/image008.gif)
